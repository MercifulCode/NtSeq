import 'isomorphic-fetch';
import { MatchMap } from './MatchMap';
export declare class Seq {
  readonly type: string;
  buffer: ArrayBuffer;
  endPadding: number;
  length: number;
  protected myComplement: ArrayBuffer | null;
  protected myContent: any;
  protected myContentATGC: any;
  protected myFractionalContent: any;
  protected myFractionalContentATGC?: any;
  readonly isRNA: boolean;
  readonly size: number;
  constructor(type?: string);
  read(strData: string): this;
  readBuffer(buffer: ArrayBuffer): this;
  readFASTA(strFASTA: string): this;
  byteComplement(): ArrayBuffer;
  sequence(): string;
  readonly complement: Seq;
  equivalent(seq: Seq): boolean;
  replicate(start?: number, length?: number): Seq;
  polymerize(seq: Seq): Seq;
  insertion(seq: Seq, offset: number): Seq;
  deletion(offset: number, count: number): Seq;
  repeat(count: number): Seq;
  mask(seq: Seq): Seq;
  cover(seq: Seq): Seq;
  nullSeq(): Seq;
  clone(): Seq;
  slice(start: number, length: number): Seq;
  readonly content: any;
  readonly fractionalContent: any;
  readonly contentATGC: any;
  readonly fractionalContentATGC: any;
  translate(ntOffset?: number, ntCount?: number): string;
  translateFrame(frame?: number, AAoffset?: number, AAcount?: number): string;
  mapSequence(seq: Seq, offset?: number): MatchMap;
  loadFile(path: string, ext: 'fasta' | '4bnt'): Promise<this | undefined>;
  loadFASTA(path: string): Promise<this | undefined>;
  load4bnt(path: string): Promise<this | undefined>;
}
